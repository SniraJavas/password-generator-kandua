trigger:
  - main

pool:
  vmImage: 'windows-latest'

jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'  # Specify the Node.js version
        displayName: 'Install Node.js'

      - powershell: |
          npm install
          npm run build  # This command should create the build directory and output files
        displayName: 'Install dependencies and build'

      - powershell: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zipPath = "$(Build.ArtifactStagingDirectory)\myapp.zip"
          $sourcePath = "$(Build.SourcesDirectory)\build"  # Updated to match the actual output directory

          # Check if the source path exists
          if (-Not (Test-Path $sourcePath)) {
            throw "Source directory does not exist: $sourcePath"
          }

          # Check if the source path contains any files or directories
          if (-Not (Get-ChildItem -Path $sourcePath -Recurse | Where-Object { $_.PSIsContainer -eq $false })) {
            throw "Source directory is empty or does not contain files: $sourcePath"
          }

          # Create the ZIP file from the source directory
          [IO.Compression.ZipFile]::CreateFromDirectory($sourcePath, $zipPath)

          # Verify the ZIP file was created
          if (-Not (Test-Path $zipPath)) {
            throw "Failed to create ZIP file at path: $zipPath"
          }

          # List the contents of the artifact staging directory
          Write-Host "Listing artifact staging directory contents:"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }
        displayName: 'Create .zip file for artifacts'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)\myapp.zip'  # Path to the .zip file
          artifactName: 'drop'
        displayName: 'Publish Build Artifacts'

  - job: Deploy
    displayName: 'Deploy Job'
    dependsOn: Build
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: 'drop'
          downloadPath: '$(Build.ArtifactStagingDirectory)'

      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Pay-As-You-Go (21f81236-6acf-452e-84ca-35e5253f63a8)'  # Replace with your service connection name
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $servicePrincipalId = "21f81236-6acf-452e-84ca-35e5253f63a8"
            $resourceGroup = "GrowthApplications"  # Replace with your resource group name
            az role assignment create --assignee $servicePrincipalId --role Contributor --scope /subscriptions/$($env:AZURE_SUBSCRIPTION_ID)/resourceGroups/$resourceGroup
        displayName: 'Assign Contributor Role to Service Principal'

      - powershell: |
          # Define the path to the .zip file
          $zipPath = "$(Build.ArtifactStagingDirectory)\drop\myapp.zip"

          # Check if ZIP file exists and display the result
          if (-Not (Test-Path $zipPath)) {
            throw "ZIP file does not exist at $zipPath"
          }

          Write-Host "ZIP file exists at $zipPath"
          Write-Host "Listing artifact staging directory contents before setting up the deployment:"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }
        displayName: 'Verify .zip file existence'

      - task: AzureWebApp@1
        inputs:
          azureSubscription: 'Pay-As-You-Go (21f81236-6acf-452e-84ca-35e5253f63a8)'  # Replace with your service connection name
          appName: 'DevPasswordReactjs'
          package: '$(Build.ArtifactStagingDirectory)\drop\myapp.zip'
          deploymentMethod: 'zipDeploy'
        displayName: 'Deploy .zip package to Azure Web App'

      - powershell: |
          # Verify that the deployment was successful
          $headers = @{
            Authorization = "Bearer $(AZURE_WEBAPP_DEPLOYMENT_TOKEN)"
          }
          $status = Invoke-RestMethod -Uri "https://$env:AZURE_WEBAPP_NAME.scm.azurewebsites.net/api/deployments/latest" -Method Get -Headers $headers
          Write-Host "Deployment status: $($status.status)"
        displayName: 'Verify Deployment Status'
        env:
          AZURE_WEBAPP_NAME: 'DevPasswordReactjs'
          AZURE_WEBAPP_DEPLOYMENT_TOKEN: $(AZURE_WEBAPP_DEPLOYMENT_TOKEN)
