trigger:
  - main  # Trigger the pipeline when changes are pushed to the 'main' branch

pool:
  vmImage: 'windows-latest'  # Use the latest Windows VM image for the build agent

jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'  # Specify the Node.js version to install
        displayName: 'Install Node.js'  # Display name for the step

      - powershell: |
          npm install  # Install project dependencies
          npm run build  # Build the project
        displayName: 'Install dependencies and build'  # Display name for the step

      - powershell: |
          # List contents of the sources directory to help identify the correct path
          Write-Host "Listing contents of the sources directory:"
          Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }

          $zipPath = "$(Build.ArtifactStagingDirectory)\myapp.zip"  # Define the path for the ZIP file to be created
          $sourcePath = "$(Build.SourcesDirectory)\path\to\build\directory"  # Define the source path to be zipped

          # List the source directory contents before creating the ZIP file
          Write-Host "Listing source directory contents:"
          Get-ChildItem -Path $sourcePath -Recurse | ForEach-Object { Write-Host $_.FullName }

          # Check if the source path contains any files or directories
          if (-Not (Test-Path $sourcePath)) {
            throw "Source directory does not exist: $sourcePath"  # Throw an error if the source directory does not exist
          }

          if (-Not (Get-ChildItem -Path $sourcePath -Recurse)) {
            throw "Source directory is empty: $sourcePath"  # Throw an error if the source directory is empty
          }

          # Create the ZIP file
          [IO.Compression.ZipFile]::CreateFromDirectory($sourcePath, $zipPath)
          
          # Verify the ZIP file was created
          if (-Not (Test-Path $zipPath)) {
            throw "Failed to create ZIP file at path: $zipPath"  # Throw an error if the ZIP file was not created
          }

          # List the contents of the artifact staging directory
          Write-Host "Listing artifact staging directory contents:"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }
        displayName: 'Create .zip file for artifacts'  # Display name for the step

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)\myapp.zip'  # Path to the .zip file to be published as an artifact
          artifactName: 'drop'  # Name of the artifact
        displayName: 'Publish Build Artifacts'  # Display name for the step

  - job: Deploy
    displayName: 'Deploy Job'
    dependsOn: Build  # This job depends on the successful completion of the Build job
    pool:
      vmImage: 'windows-latest'  # Use the latest Windows VM image for the deployment agent
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: 'drop'  # Name of the artifact to download
          downloadPath: '$(Build.ArtifactStagingDirectory)'  # Path to download the artifact to

      - powershell: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem  # Add the .NET assembly needed for ZIP file operations
          $zipPath = "$(Build.ArtifactStagingDirectory)\drop\myapp.zip"  # Define the path to the downloaded ZIP file
          $extractPath = "$(Build.ArtifactStagingDirectory)\extracted"  # Define the path for extracting the ZIP file

          # Check if ZIP file exists and display the result
          $zipFileExists = Test-Path $zipPath
          Write-Host "Does the ZIP file exist at $zipPath? $zipFileExists"

          # List the artifact staging directory contents before extraction
          Write-Host "Listing artifact staging directory contents before extraction:"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }

          # Verify the ZIP file exists
          if (-Not $zipFileExists) {
            throw "ZIP file does not exist at path: $zipPath"  # Throw an error if the ZIP file does not exist
          }

          # Display contents of the ZIP file
          Write-Host "Contents of the ZIP 
