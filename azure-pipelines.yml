trigger:
  - main

pool:
  vmImage: 'windows-latest'

jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'  # Specify the Node.js version
        displayName: 'Install Node.js'

      - powershell: |
          npm install
          npm run build
        displayName: 'Install dependencies and build'

      - powershell: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zipPath = "$(Build.ArtifactStagingDirectory)\myapp.zip"
          $sourcePath = "$(Build.SourcesDirectory)\path\to\build"

          # Check if the source path contains any files or directories
          if (-Not (Test-Path $sourcePath)) {
            throw "Source directory does not exist: $sourcePath"
          }

          if (-Not (Get-ChildItem -Path $sourcePath -Recurse)) {
            throw "Source directory is empty: $sourcePath"
          }

          # Create the ZIP file from the source directory
          [IO.Compression.ZipFile]::CreateFromDirectory($sourcePath, $zipPath)

          # Verify the ZIP file was created
          if (-Not (Test-Path $zipPath)) {
            throw "Failed to create ZIP file at path: $zipPath"
          }

          # List the contents of the artifact staging directory
          Write-Host "Listing artifact staging directory contents:"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse | ForEach-Object { Write-Host $_.FullName }
        displayName: 'Create .zip file for artifacts'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)\myapp.zip'  # Path to the .zip file
          artifactName: 'drop'
        displayName: 'Publish Build Artifacts'

  - job: Deploy
    displayName: 'Deploy Job'
    dependsOn: Build
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: 'drop'
          downloadPath: '$(Build.ArtifactStagingDirectory)'

      - powershell: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zipPath = "$(Build.ArtifactStagingDirectory)\drop\myapp.zip"
          $extractPath = "$(Build.ArtifactStagingDirectory)\extracted"

          # Check if ZIP file exists and display the result
          $zipFileExists = Test-Path $zipPath
          Write-Host "Does the ZIP file exist at $zipPath? $zipFileExists"

          # List the artifact staging directory contents before extraction
